---
version: 2.1

orbs:
  win: circleci/windows@2.2.0

executors:
  linux_executor:
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
    resource_class: medium
    working_directory: ~/jc-kzg-4844
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2

  mac_os_executor:
    macos:
      xcode: "13.4.1"
    working_directory: ~/jc-kzg-4844
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2

commands:
  checkout_code:
    description: "Checkout code"
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init --recursive

jobs:
  x86-64-linux-build:
    executor: linux_executor
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install clang
      - run:
          name: "Build C-KZG-4844"
          command: |
            cd c-kzg-4844/src
            make blst
            make lib
      - run:
          name: "Build and test java binding"
          command: |
            cd c-kzg-4844/bindings/java
            make build test
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/amd64

  arm64-linux-build:
    executor: linux_executor
    environment:
      - DOCKER_IMAGE=arm64v8/debian:buster
      - CONTAINER_DISTRO=debian:buster
      - PKG_RELEASE=buster
      - PKG_DISTRO=debian
      - EMU=on
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install clang
            sudo apt-get install gcc-multilib g++-multilib
            sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-aarch64-linux-gnu
      - run:
          name: "Build C-KZG-4844"
          command: |
            cd c-kzg-4844/src
            make CROSS_COMPILE="aarch64-linux-gnu-" CXX="aarch64-linux-gnu-g++" blst
            make CLANG_EXECUTABLE=aarch64-linux-gnu-gcc lib
      - run:
          name: "Build java binding"
          command: |
            clang --version
            cd c-kzg-4844/bindings/java
            make CLANG_EXECUTABLE=aarch64-linux-gnu-gcc OS_ARCH=aarch64 build
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/aarch64

  mac-os-build:
    executor: mac_os_executor
    steps:
      - checkout_code
      - run:
          name: "Build C-KZG-4844"
          command: |
            cd c-kzg-4844/src
            make blst
            make lib
      - run:
          name: "Build and test java binding"
          command: |
            cd c-kzg-4844/bindings/java
            make build test
            echo "Building for aarch64. Have to rebuild C-KZG-4844."
            cd ../../src
            make CC="cc -arch arm64" blst -B
            make CFLAGS="-O2 -fPIC -target arm64-apple-macos" lib -B
            cd ../bindings/java
            make CC_FLAGS="-target arm64-apple-macos" OS_ARCH=aarch64 build -B
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/x86_64
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/aarch64

  windows-build:
    executor: win/default
    steps:
      - checkout_code
      - run:
          name: "Install dependencies"
          command: |
            choco install make
            choco install mingw
      - run:
          name: "Build C-KZG-4844"
          command: |
            cd c-kzg-4844/src
            make blst
            make CLANG_EXECUTABLE=gcc lib
      - run:
          shell: bash.exe
          name: "Build and test java binding"
          command: |
            cd c-kzg-4844/bindings/java
            make CLANG_EXECUTABLE=gcc build
            ./gradlew.bat clean test
      - persist_to_workspace:
          root: ./
          paths:
            - ./c-kzg-4844/bindings/java/src/main/resources/ethereum/ckzg4844/lib/amd64

  assemble:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: ~/jc-kzg-4844
      - run:
          name: "Copy generated sources"
          command: |

            cd c-kzg-4844/bindings/java/
            
            SRCDIR="../../../src/main/java/ethereum/ckzg4844"
            RESOURCEDIR="../../../src/main/resources/ethereum/ckzg4844/lib"
            
            mkdir -p $SRCDIR $RESOURCEDIR
            
            cp src/main/java/ethereum/ckzg4844/*.java $SRCDIR
            
            LIBDIR="src/main/resources/ethereum/ckzg4844/lib"
            
            cp -R $LIBDIR/amd64 $RESOURCEDIR
            cp -R $LIBDIR/x86_64 $RESOURCEDIR
            cp -R $LIBDIR/aarch64 $RESOURCEDIR

      - run:
          name: "Build Jar"
          command: |
            ./gradlew --no-daemon --parallel build

      - run:
          name: "Check Jar"
          command: |
            ./gradlew --no-daemon --info checkJarContents

      - persist_to_workspace:
          root: .
          paths:
            - ./

      - store_artifacts:
          name: "Store Jar"
          path: build/libs

  publish:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: "Publish"
          command: |
            ./gradlew --no-daemon --parallel checkJarContents publish

workflows:
  version: 2
  default:
    jobs:
      - x86-64-linux-build:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
          context:
            - dockerhub-quorumengineering-ro
      - arm64-linux-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - mac-os-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - windows-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - assemble:
          requires:
            - x86-64-linux-build
            - arm64-linux-build
            - mac-os-build
            - windows-build
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - publish:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
            branches:
              only:
                - master
          context:
            - cloudsmith-protocols
            - dockerhub-quorumengineering-ro